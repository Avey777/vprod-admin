name: Forgejo Actions v-workspace
run-name: ${{ runner.actor }} is testing out Forgejo Actions 🚀
on:
  push:
    branches:
      - "main"

jobs:
  build:
    runs-on: docker
    container:
      image: thevlang/vlang:alpine-dev
    outputs:
      build-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Debug workspace
        run: |
          echo "📁 Current workspace:"
          pwd
          ls -la
          echo "🔧 V version:"
          v version

      - name: Build application
        run: |
          v -prod -o v-admin .

      - name: Test build output
        run: |
          echo "✅ Build output:"
          ls -la
          [ -f "v-admin" ] && echo "Build successful" || echo "Build failed"

      - name: Prepare artifacts
        run: |
          echo "📦 Preparing artifacts..."
          # 创建必要的配置文件或目录
          mkdir -p etc
          [ -f "etc/config.toml" ] || echo "# Configuration file" > etc/config.toml

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: v-admin-build
          path: |
            v-admin
            etc/
            Dockerfile
          retention-days: 1

  deploy:
    runs-on: docker
    needs: build
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: v-admin-build

      - name: Set up Docker
        run: |
          echo "🐳 Docker version:"
          docker --version

      - name: Verify artifacts
        run: |
          echo "📁 Deployment workspace:"
          pwd
          ls -la
          echo "✅ Artifacts verification:"
          [ -f "v-admin" ] && echo "✓ Binary found" || echo "✗ Binary missing"
          [ -f "Dockerfile" ] && echo "✓ Dockerfile found" || echo "✗ Dockerfile missing"

      - name: Clean up existing containers
        run: |
          echo "🧹 Cleaning up existing containers..."
          docker rm -f v-admin || true
          docker rmi -f avey777/v-admin || true

      - name: Build Docker image
        run: |
          echo "🔨 Building Docker image..."
          docker buildx build \
            --no-cache \
            --rm=true \
            --progress=plain \
            -f Dockerfile \
            -t avey777/v-admin .

      - name: Verify Docker image
        run: |
          echo "🔍 Verifying Docker image..."
          docker images | grep v-admin

      - name: Run Container
        run: |
          echo "🚀 Starting container..."
          # 创建本地配置目录
          mkdir -p ~/.config/
          # 如果配置文件不存在，创建默认配置
          [ -f "~/.config/v-admin/config.toml" ] || touch ~/.config/v-admin/config.toml

          docker run --name=v-admin \
            --restart=unless-stopped \
            -p 9009:9009 \
            -e CONFIG_PATH=backend/etc/config.toml \
            -v ~/.config/v-admin/config.toml:/workspace/v-admin/etc/config.toml \
            -d avey777/v-admin

      - name: Check container status
        run: |
          echo "📊 Container status:"
          docker ps -a | grep v-admin
          echo "🔍 Container logs:"
          docker logs v-admin --tail 50 || true

      - name: Health check
        run: |
          echo "🏥 Performing health check..."
          sleep 10
          docker ps | grep v-admin && echo "✅ Container is running" || echo "❌ Container failed to start"

      - name: Clean Docker cache
        run: |
          echo "🧹 Cleaning Docker cache..."
          docker builder prune -f
          docker image prune -f

  notification:
    runs-on: docker
    needs: [build, deploy]
    if: always()
    steps:
      - name: Deployment status
        run: |
          echo "🎉 Deployment completed!"
          echo "Build job status: ${{ needs.build.result }}"
          echo "Deploy job status: ${{ needs.deploy.result }}"

          if [ "${{ needs.build.result }}" = "success" ] && [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "✅ All jobs completed successfully!"
          else
            echo "❌ Some jobs failed. Check the logs above."
            exit 1
          fi
