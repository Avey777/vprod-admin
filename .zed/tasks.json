// Static tasks configuration.
[
  {
    "label": "v run backend .",
    "tags": ["v-main"],
    // "command": "v wipe-cache && v -g -keepc -cg -showcc -show-c-output -no-parallel -d veb_livereload watch -d log_debug run main.v",
    "command": "v wipe-cache && v -g -no-parallel -d veb_livereload watch -d log_debug run main.v",
    "args": ["-f", "etc/config_dev.toml"],
    // 命令的环境变量覆盖，会追加到终端设置中的环境变量
    "env": {},
    // // 运行命令的工作目录，默认为当前项目根目录
    "cwd": "$ZED_WORKTREE_ROOT/backend",
    //  是否使用新终端标签页或复用现有终端来运行进程，默认为`false`
    "use_new_terminal": false,
    // 是否允许同时运行同一任务的多个实例，或者等待现有实例完成，默认为`false`
    "allow_concurrent_runs": false,
    // 命令启动后如何处理终端面板和标签页：
    // * `always` — 始终显示任务面板，并聚焦其中的对应标签页（默认）
    // * `no_focus` — 始终显示任务面板，添加任务标签页但不聚焦
    // * `never` — 不改变聚焦状态，但仍会在面板中添加/复用任务标签页
    "reveal": "always",
    // 命令完成后如何处理终端面板和标签页：
    // * `never` — 命令完成后不做任何操作（默认）
    // * `always` — 始终隐藏终端标签页，如果是面板中最后一个标签页则同时隐藏面板
    // * `on_success` — 仅在任务成功时隐藏终端标签页，否则行为类似`always`
    "hide": "never",
    // 在终端中运行任务时使用的shell
    "shell": "system",
    // 是否在生成的任务输出中显示任务摘要行，默认为`true`
    "show_summary": true,
    // 是否在生成的任务输出中显示命令行，默认为`true`
    "show_output": true
  },
  {
    "label": "v test .",
    "tags": ["v-test"],
    "command": "v",
    "args": ["-stats", "test", "."],
    "cwd": "$ZED_WORKTREE_ROOT/backend",
    "use_new_terminal": false,
    "reveal": "always"
  },
  {
    "label": "v build .",
    "tags": ["v-main"],
    "command": "v -g -no-parallel -show-c-output -o target/debug/main .",
    "args": [],
    "cwd": "$ZED_WORKTREE_ROOT/backend",
    "use_new_terminal": false,
    "reveal": "always"
  },
  {
    "label": "v build -prod .",
    "tags": ["v-main"],
    "command": "v -prod -no-parallel -show-c-output -o main .",
    "args": [],
    "cwd": "$ZED_WORKTREE_ROOT/backend",
    "use_new_terminal": false,
    "reveal": "always"
  }
]

/*
在终端中运行任务时使用的shell
可接受3种值：
1. (默认) 使用/etc/passwd中的系统默认终端配置
     "shell": "system"
2. 指定程序：
     "shell": {
       "program": "sh"
     }
3. 带参数的指定程序：
    "shell": {
        "with_arguments": {
          "program": "/bin/bash",
          "args": ["--login"]
        }
    }
*/
// "shell": "system",
